<?xml version="1.0" encoding="utf-8"?>
<!--
==============================================================================
 Copyright (c) NT Prime LLC. All Rights Reserved.
==============================================================================
-->
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003"
         DefaultTargets="Build"
         ToolsVersion="4.0">


  <PropertyGroup>
    <ConstructTasksFolder Condition="'$(ConstructTasksFolder)'=='' And '$(ConstructFolder)'!=''">$(ConstructFolder)</ConstructTasksFolder>
    <ConstructTasksFolder Condition="'$(ConstructTasksFolder)'=='' And '$(ENLISTROOT)'!='' And Exists('$(ENLISTROOT)\build\')">$(ENLISTROOT)\build\</ConstructTasksFolder>
    <ConstructTasksFolder Condition="'$(ConstructTasksFolder)'=='' And '$(WORKSPACE)'!='' And Exists('$(WORKSPACE)\build\')">$(WORKSPACE)\build\</ConstructTasksFolder>
    <ConstructTaskAssemblyFile>$(ConstructTasksFolder)Construct.Build.Tasks.dll</ConstructTaskAssemblyFile>
  </PropertyGroup>
  <Import Project="$(ConstructTasksFolder)Construct.Build.tasks"/>

  <!-- Defines the standard Build target ordering. -->
  <PropertyGroup>
    <BuildDependsOn>
      BeforeBuild;
      CoreBuild;
      AfterBuild
    </BuildDependsOn>
  </PropertyGroup>

  <!-- 
  The property assignments here are done to allow forwarding of values from the 
  current MSBuild scope to children MSBuild scopes while the build process is 
  walking the source code tree and building projects recursively. In each case,
  we are creating a string of key-value pairs (semicolon-delimited) that can be 
  passed to the child MSBuild scopes and parsed.  Remember that all $() property
  references will be replaced with their current values at runtime.
  -->
  <PropertyGroup>
    <!-- The standard set of MSBuild properties necessary for recursive MSBuild invocations. -->
    <StandardProperties>
      ProjectFilter=$(ProjectFilter);
      BuildProjectReferences=$(BuildProjectReferences);
      SkipInvalidConfigurations=$SkipInvalidConfigurations);
      Configuration=$(ProjectConfiguration);
      Platform=$(ProjectPlatform);
      OutDir=$(OutDir);
      IsPackaging=$(IsPackaging)
    </StandardProperties>
    <!-- The standard set of CodeAnalysis properties. -->
    <CodeAnalysisProperties Condition="'$(RunCodeAnalysis)'!=''">
      RunCodeAnalysis=$(RunCodeAnalysis)
    </CodeAnalysisProperties>
    <CodeAnalysisProperties Condition="'$(CodeAnalysisRuleSet)'!=''">
      CodeAnalysisRuleSet=$(CodeAnalysisRuleSet);$(CodeAnalysisProperties)
    </CodeAnalysisProperties>
    <!-- The standard set of StrongNaming properties. -->
    <StrongNameProperties>
      SignAssembly=$(SignAssembly);
      AssemblyOriginatorKeyFile=$(AssemblyOriginatorKeyFile)
    </StrongNameProperties>
    <NuGetProperties>
      RestoreNuGetPackages=$(RestoreNuGetPackages);
      BuildNuGetPackage=$(BuildNuGetPackage);
      NuGetPackageOutputDir=$(NuGetPackageOutputDir);
      NuGetToolsPath=$(NuGetToolsPath)
    </NuGetProperties>
  </PropertyGroup>


  <PropertyGroup>
    <!-- if no project filter is passed to MSBuild, default to an "anything" filter -->
    <FilterRegex Condition="'$(ProjectFilter)' == ''">.+</FilterRegex>
    <!-- if a regex filter is passed to MSBuild, inject it into the standard RegEx 
         This regex says "build any project entries that match the following patterns:
          - SomeFolder\dirs.proj
          - SomeFolder\$(ProjectFilter) - where project filter is a regex is passed in 
    -->
    <FilterRegex
      Condition="'$(ProjectFilter)' != '' AND '$(BuildDeployPackage)'=='true'">^[\.?\w+]+\\(dirs\.proj|deploy\.proj|$(ProjectFilter))$</FilterRegex>
    <FilterRegex
      Condition="'$(ProjectFilter)' != '' AND '$(BuildDeployPackage)'!='true'">^[\.?\w+]+\\(dirs\.proj|$(ProjectFilter))$</FilterRegex>

  </PropertyGroup>
  <!-- BeforeBuild and AfterBuild are placeholders here, to be overridden as necessary in consuming *proj files. -->
  <Target Name="BeforeBuild"/>
  <Target Name="AfterBuild"/>

  <!-- 
  The Build target itself doesn't do anything.  It's a placeholder using to 
  allow MSBuild to invoke its dependencies, which BeforeBuild, CoreBuild, & AfterBuild
  -->
  <Target
        Name="Build"
        Condition=" '$(_InvalidConfigurationWarning)' != 'true' "
        DependsOnTargets="$(BuildDependsOn)"
        Returns="$(TargetPath)" />

  <Target Name="CoreBuild" >
    <CallTarget Targets="@(PackageTargets)"/>
  </Target>

  <!-- Properties used to define the ordering of the Rebuild target. -->
  <PropertyGroup>
    <!-- These statements allow project files to override the default target from Build to something else if they are custom.-->
    <_ProjectDefaultTargets Condition="'$(MSBuildProjectDefaultTargets)' != ''">$(MSBuildProjectDefaultTargets)</_ProjectDefaultTargets>
    <_ProjectDefaultTargets Condition="'$(MSBuildProjectDefaultTargets)' == ''">Build</_ProjectDefaultTargets>

    <!-- This basically says that Rebuild is really a Clean & Build back to back. -->
    <RebuildDependsOn>
      BeforeRebuild;
      Clean;
      $(_ProjectDefaultTargets);
      AfterRebuild;
    </RebuildDependsOn>

    <!-- This basically says that Rebuild is really a Clean & Build back to back. -->
    <RebuildDependsOn Condition=" '$(MSBuildProjectDefaultTargets)' == 'Rebuild' " >
      BeforeRebuild;
      Clean;
      Build;
      AfterRebuild;
    </RebuildDependsOn>
  </PropertyGroup>

  <!-- Similar to Build above, Rebuild is a placeholder that allows it's DependsOn targets to execute. -->
  <Target
      Name="Rebuild"
      Condition=" '$(_InvalidConfigurationWarning)' != 'true' "
      DependsOnTargets="$(RebuildDependsOn)"
      Returns="$(TargetPath)"/>

  <Target Name="BeforeRebuild"/>
  <Target Name="AfterRebuild"/>

  <!-- Clean follows the same steps as Build and Rebuild, refer to them for commentary. -->
  <PropertyGroup>
    <CleanDependsOn>
      BeforeClean;
      CoreClean;
      AfterClean
    </CleanDependsOn>
  </PropertyGroup>
  <Target
      Name="Clean"
      Condition=" '$(_InvalidConfigurationWarning)' != 'true' "
      DependsOnTargets="$(CleanDependsOn)" />

  <Target Name="BeforeClean"/>
  <Target Name="AfterClean"/>
  <Target Name="CoreClean"
          Condition="'@(ProjectFiles)'!=''">

    <Message Text="Incoming Prefiltered Project = %(ProjectFiles.Identity)" Importance="Normal"/>
    <Message Text="Project Filter Regex = $(FilterRegex)" Importance="Normal"/>
    <Construct.Build.Tasks.RegexFilterTask
      ItemsToFilter="@(ProjectFiles)"
      RegexPattern="$(FilterRegex)">
      <Output TaskParameter="OutputItems" ItemName="FilteredProjectFiles"/>
      <Output TaskParameter="ItemCount" ItemName="FilteredProjectCount"/>
    </Construct.Build.Tasks.RegexFilterTask>
    <Message Condition=" '%(FilteredProjectFiles.Identity)' != '' "
             Text="Filtered Project: %(FilteredProjectFiles.Identity)"
             Importance="Normal"/>


    <MSBuild Projects="@(FilteredProjectFiles)"
             BuildInParallel="$(BuildInParallel)"
             SkipNonexistentProjects="$(SkipNonexistentProjects)"
             Targets="Clean"
             Properties="$(StandardProperties);IntermediateOutputPath=$(IntermediateOutputPath)\%(FilteredProjectFiles.Filename)\;$(CodeAnalysisProperties);$(StrongNameProperties);$(CustomProperties);$(NuGetProperties)"
             />
  </Target>

  <PropertyGroup>
    <PackageZipDependsOn>
      BeforePackageZip;
      CorePackageZip;
      AfterPackageZip
    </PackageZipDependsOn>
  </PropertyGroup>

  <Target
    Name="PackageZip"
    DependsOnTargets="$(PackageZipDependsOn)"></Target>

  <Target Name="BeforePackageZip"/>
  <Target Name="AfterPackageZip"/>
  <Target Name="CorePackageZip">
    <ZipFiles InputDir="$(FolderToZip)" OutputFileName="$(OutputZipFile)" ConstructDir="$(ConstructTasksFolder)">
      <Output TaskParameter="OutputFile" PropertyName="PackagedZipFile" />
    </ZipFiles>
    <Message Text="Construct : Zip file created : $(PackagedZipFile)" Importance="High"/>
  </Target>


  <PropertyGroup>
    <PackageNuGetDependsOn>
      BeforePackageNuGet;
      CorePackageNuGet;
      AfterPackageNuGet
    </PackageNuGetDependsOn>
  </PropertyGroup>

  <Target
    Name="PackageNuGet"
    DependsOnTargets="$(PackageNuGetDependsOn)"></Target>

  <Target Name="BeforePackageNuGet"/>
  <Target Name="AfterPackageNuGet"/>
  <Target Name="CorePackageNuget" DependsOnTargets="CheckNuGetPrerequisites">

    <PropertyGroup>
      <NuGetPackagingBasePath Condition="'$(NuGetPackagingBasePath)'==''">$(IntermediateOutputPath)</NuGetPackagingBasePath>
    </PropertyGroup>
    <MakeDir Condition="!Exists('$(NuGetPackagingBasePath)\lib')" Directories="$(NuGetPackagingBasePath)\lib"/>
    <MakeDir Condition="!Exists('$(NuGetPackagingBasePath)\content')" Directories="$(NuGetPackagingBasePath)\content"/>
    <MakeDir Condition="!Exists('$(NuGetPackagingBasePath)\tools')" Directories="$(NuGetPackagingBasePath)\tools"/>
    <Copy SourceFiles="@(NuGetLibraries)" DestinationFolder="$(NuGetPackagingBasePath)\lib"  SkipUnchangedFiles="true" OverwriteReadOnlyFiles="true" />
    <Copy SourceFiles="@(NuGetTools)" DestinationFolder="$(NuGetPackagingBasePath)\tools"  SkipUnchangedFiles="true" OverwriteReadOnlyFiles="true" />
    <Copy SourceFiles="@(NuGetContent)" DestinationFolder="$(NuGetPackagingBasePath)\content"  SkipUnchangedFiles="true" OverwriteReadOnlyFiles="true" />

    <BuildNuGetPackage NuSpec="@(NuSpecFiles)"
                       BasePath="$(NuGetPackagingBasePath)"
                       NuGetPackageOutDir="$(NuGetPackageOutputDir)"
                       NuGetExe="$(NuGetExePath)"
                       ConstructDir="$(ConstructTasksFolder)"/>
  </Target>

  <Target Name="CheckNuGetPrerequisites">
    <!-- Raise an error if we're unable to locate nuget.exe  -->
    <Error Condition="!Exists('$(NuGetExePath)')" Text="Unable to locate '$(NuGetExePath)'" />
  </Target>


  <PropertyGroup>
    <PackageMSBuildDependsOn>
      BeforePackageMSBuild;
      CorePackageMSBuild;
      AfterPackageMSBuild
    </PackageMSBuildDependsOn>
  </PropertyGroup>
  <Target Name="BeforePackageMSBuild"/>
  <Target Name="AfterPackageMSBuild"/>
  <Target Name="PackageMSBuild"
          DependsOnTargets="$(PackageMSBuildDependsOn)"/>

  <Target Name="CorePackageMSBuild"
          DependsOnTargets="$(CorePackageMSBuildDependsOn)">
    <MSBuild Projects="@(ProjectFiles)"
             BuildInParallel="$(BuildInParallel)"
             SkipNonexistentProjects="$(SkipNonexistentProjects)"
             Properties="$(StandardProperties);IntermediateOutputPath=$(IntermediateOutputPath)\%(FilteredProjectFiles.Filename)\;$(CodeAnalysisProperties);$(StrongNameProperties);$(CustomProperties)"
             Targets="Package"
             />
  </Target>

  <!-- 
  CopyUpdatedDeployableBinaries - 
  Copies the Xap/Zip files from a filtered build into the appropriate ClientBin folders for packaging.
  We must simulate parts of the build process for the hosting Web application in the cases 
  where we are doing a filtered build since the web application may not be rebuilt. 
  -->
  <Target Name="CopyUpdatedDeployableBinaries"
         Condition="'$(ProjectFilter)' != '' and '$(DeploymentProject)'=='true'">
    <ItemGroup>
      <XapFiles Include="$(OutDir)\*.xap" Exclude="$(OutDir)\*.Test.xap"/>
      <XapFiles Include="$(OutDir)\*.zip" />
    </ItemGroup>
    <Message Condition=" '%(XapFiles.Identity)' != '' "
             Text="Xap file to be copied for deployment: %(XapFiles.Identity)"
             Importance="Normal"/>

    <!-- Copy Silverlight Zip and Xap file to $(OutDir)\_PublishedWebsites\app\ClientBin folder-->
    <Copy SourceFiles="@(XapFiles)"
          DestinationFolder="$(WebProjectOutputDir)\ClientBin"
          SkipUnchangedFiles="true"
          Retries="$(CopyRetryCount)"
          RetryDelayMilliseconds="$(CopyRetryDelayMilliseconds)"/>

    <!-- Copy Silverlight Zip and Xap file to @(ProjectFiles)\ClientBin folder-->
    <Copy SourceFiles="@(XapFiles)"
          DestinationFolder="%(ProjectFiles.RelativeDir)\ClientBin"
          SkipUnchangedFiles="true"
          Retries="$(CopyRetryCount)"
          RetryDelayMilliseconds="$(CopyRetryDelayMilliseconds)"/>
  </Target>

  <PropertyGroup>
    <CorePackageMSBuildDependsOn
      Condition="'$(ProjectFilter)' != '' and '$(DeploymentProject)'=='true'">
      CopyUpdatedDeployableBinaries
    </CorePackageMSBuildDependsOn>
  </PropertyGroup>
</Project>
